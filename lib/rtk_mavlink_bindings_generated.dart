// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings for `src/rtk_mavlink.h`.
///
/// Regenerate bindings with `flutter pub run ffigen --config ffigen.yaml`.
///
class RtkMavlinkBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  RtkMavlinkBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  RtkMavlinkBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void send_heardbeat() {
    return _send_heardbeat();
  }

  late final _send_heardbeatPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('send_heardbeat');
  late final _send_heardbeat = _send_heardbeatPtr.asFunction<void Function()>();

  void send_local_pose(
    double x,
    double y,
    double z,
  ) {
    return _send_local_pose(
      x,
      y,
      z,
    );
  }

  late final _send_local_posePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Float, ffi.Float, ffi.Float)>>(
      'send_local_pose');
  late final _send_local_pose =
      _send_local_posePtr.asFunction<void Function(double, double, double)>();

  bool point_is_reached() {
    return _point_is_reached();
  }

  late final _point_is_reachedPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function()>>('point_is_reached');
  late final _point_is_reached =
      _point_is_reachedPtr.asFunction<bool Function()>();
}
